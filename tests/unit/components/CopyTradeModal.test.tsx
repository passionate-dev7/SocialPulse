import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { jest } from '@jest/globals';
import CopyTradeModal from '../../../src/components/CopyTradeModal';
import { TraderStats } from '../../../src/services/hyperliquid';

const mockTrader: TraderStats = {
  address: '0x1234567890123456789012345678901234567890',
  pnl: 15420.50,
  volume: 2500000.75,
  winRate: 68.5,
  sharpeRatio: 2.34,
  maxDrawdown: 12.8,
  totalTrades: 156,
  avgHoldTime: 4.2,
  roi: 24.8
};

describe('CopyTradeModal Component', () => {
  const mockOnClose = jest.fn();
  const mockOnCopy = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('Rendering', () => {
    it('should not render when isOpen is false', () => {
      render(
        <CopyTradeModal
          trader={mockTrader}
          isOpen={false}
          onClose={mockOnClose}
          onCopy={mockOnCopy}
        />
      );

      expect(screen.queryByTestId('copy-trade-modal')).not.toBeInTheDocument();
    });

    it('should render modal when isOpen is true', () => {
      render(
        <CopyTradeModal
          trader={mockTrader}
          isOpen={true}
          onClose={mockOnClose}
          onCopy={mockOnCopy}
        />
      );

      expect(screen.getByTestId('copy-trade-modal')).toBeInTheDocument();
      expect(screen.getByText('Copy Trade Settings')).toBeInTheDocument();
    });

    it('should display trader information', () => {
      render(
        <CopyTradeModal
          trader={mockTrader}
          isOpen={true}
          onClose={mockOnClose}
          onCopy={mockOnCopy}
        />
      );

      expect(screen.getByText(/0x1234...7890/)).toBeInTheDocument();
      expect(screen.getByText('68.5%')).toBeInTheDocument(); // Win rate\n      expect(screen.getByText('24.8%')).toBeInTheDocument(); // ROI\n    });\n\n    it('should render allocation slider with default value', () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      const slider = screen.getByLabelText('Allocation Percentage');\n      expect(slider).toBeInTheDocument();\n      expect(slider).toHaveValue('10'); // Default allocation\n      expect(screen.getByText('10%')).toBeInTheDocument();\n    });\n\n    it('should render risk settings', () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      expect(screen.getByLabelText('Max Position Size ($)')).toBeInTheDocument();\n      expect(screen.getByLabelText('Stop Loss (%)')).toBeInTheDocument();\n      expect(screen.getByLabelText('Take Profit (%)')).toBeInTheDocument();\n    });\n\n    it('should render copy options', () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      expect(screen.getByLabelText('Copy all trades')).toBeInTheDocument();\n      expect(screen.getByLabelText('Copy only profitable trades')).toBeInTheDocument();\n      expect(screen.getByLabelText('Copy specific coins only')).toBeInTheDocument();\n    });\n\n    it('should render action buttons', () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      expect(screen.getByText('Start Copying')).toBeInTheDocument();\n      expect(screen.getByText('Cancel')).toBeInTheDocument();\n    });\n  });\n\n  describe('Allocation Controls', () => {\n    it('should update allocation percentage when slider changes', () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      const slider = screen.getByLabelText('Allocation Percentage');\n      fireEvent.change(slider, { target: { value: '25' } });\n\n      expect(screen.getByText('25%')).toBeInTheDocument();\n    });\n\n    it('should update allocation when preset buttons are clicked', () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      const preset25Button = screen.getByText('25%');\n      fireEvent.click(preset25Button);\n\n      expect(screen.getByLabelText('Allocation Percentage')).toHaveValue('25');\n    });\n\n    it('should validate allocation limits', async () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      const slider = screen.getByLabelText('Allocation Percentage');\n      \n      // Try to set above maximum\n      fireEvent.change(slider, { target: { value: '60' } });\n      \n      await waitFor(() => {\n        expect(screen.getByText('Maximum allocation is 50%')).toBeInTheDocument();\n      });\n    });\n\n    it('should calculate estimated position size based on allocation', () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n          availableBalance={10000}\n        />\n      );\n\n      const slider = screen.getByLabelText('Allocation Percentage');\n      fireEvent.change(slider, { target: { value: '20' } });\n\n      expect(screen.getByText('Est. Position Size: $2,000')).toBeInTheDocument();\n    });\n  });\n\n  describe('Risk Management', () => {\n    it('should validate stop loss percentage', async () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      const stopLossInput = screen.getByLabelText('Stop Loss (%)');\n      fireEvent.change(stopLossInput, { target: { value: '60' } });\n\n      await waitFor(() => {\n        expect(screen.getByText('Stop loss cannot exceed 50%')).toBeInTheDocument();\n      });\n    });\n\n    it('should validate take profit percentage', async () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      const takeProfitInput = screen.getByLabelText('Take Profit (%)');\n      fireEvent.change(takeProfitInput, { target: { value: '5' } });\n\n      await waitFor(() => {\n        expect(screen.getByText('Take profit should be at least 10%')).toBeInTheDocument();\n      });\n    });\n\n    it('should validate maximum position size', async () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n          availableBalance={5000}\n        />\n      );\n\n      const maxPositionInput = screen.getByLabelText('Max Position Size ($)');\n      fireEvent.change(maxPositionInput, { target: { value: '6000' } });\n\n      await waitFor(() => {\n        expect(screen.getByText('Position size exceeds available balance')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Copy Options', () => {\n    it('should toggle copy all trades option', () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      const copyAllCheckbox = screen.getByLabelText('Copy all trades');\n      expect(copyAllCheckbox).toBeChecked(); // Default should be true\n\n      fireEvent.click(copyAllCheckbox);\n      expect(copyAllCheckbox).not.toBeChecked();\n    });\n\n    it('should enable coin selection when \"Copy specific coins only\" is checked', () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      const specificCoinsCheckbox = screen.getByLabelText('Copy specific coins only');\n      fireEvent.click(specificCoinsCheckbox);\n\n      expect(screen.getByText('Select Coins:')).toBeInTheDocument();\n      expect(screen.getByLabelText('BTC')).toBeInTheDocument();\n      expect(screen.getByLabelText('ETH')).toBeInTheDocument();\n      expect(screen.getByLabelText('SOL')).toBeInTheDocument();\n    });\n\n    it('should validate that at least one coin is selected when specific coins option is enabled', async () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      const specificCoinsCheckbox = screen.getByLabelText('Copy specific coins only');\n      fireEvent.click(specificCoinsCheckbox);\n\n      const startCopyingButton = screen.getByText('Start Copying');\n      fireEvent.click(startCopyingButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('Please select at least one coin to copy')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Modal Actions', () => {\n    it('should call onClose when cancel button is clicked', () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      fireEvent.click(screen.getByText('Cancel'));\n      expect(mockOnClose).toHaveBeenCalledTimes(1);\n    });\n\n    it('should call onClose when backdrop is clicked', () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      const backdrop = screen.getByTestId('modal-backdrop');\n      fireEvent.click(backdrop);\n      expect(mockOnClose).toHaveBeenCalledTimes(1);\n    });\n\n    it('should call onClose when escape key is pressed', () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      fireEvent.keyDown(document, { key: 'Escape', code: 'Escape' });\n      expect(mockOnClose).toHaveBeenCalledTimes(1);\n    });\n\n    it('should call onCopy with correct parameters when Start Copying is clicked', async () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      const slider = screen.getByLabelText('Allocation Percentage');\n      fireEvent.change(slider, { target: { value: '25' } });\n\n      const stopLossInput = screen.getByLabelText('Stop Loss (%)');\n      fireEvent.change(stopLossInput, { target: { value: '15' } });\n\n      const takeProfitInput = screen.getByLabelText('Take Profit (%)');\n      fireEvent.change(takeProfitInput, { target: { value: '30' } });\n\n      fireEvent.click(screen.getByText('Start Copying'));\n\n      await waitFor(() => {\n        expect(mockOnCopy).toHaveBeenCalledWith({\n          trader: mockTrader,\n          allocation: 25,\n          stopLoss: 15,\n          takeProfit: 30,\n          copyAllTrades: true,\n          selectedCoins: [],\n          maxPositionSize: undefined\n        });\n      });\n    });\n\n    it('should prevent copy action when form has validation errors', async () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      // Set invalid stop loss\n      const stopLossInput = screen.getByLabelText('Stop Loss (%)');\n      fireEvent.change(stopLossInput, { target: { value: '60' } });\n\n      fireEvent.click(screen.getByText('Start Copying'));\n\n      await waitFor(() => {\n        expect(mockOnCopy).not.toHaveBeenCalled();\n        expect(screen.getByText('Stop loss cannot exceed 50%')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Risk Assessment', () => {\n    it('should show risk level based on trader performance', () => {\n      const highRiskTrader: TraderStats = {\n        ...mockTrader,\n        maxDrawdown: 45.8,\n        winRate: 35.2,\n        sharpeRatio: -0.25\n      };\n\n      render(\n        <CopyTradeModal\n          trader={highRiskTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      expect(screen.getByText('Risk Level: High')).toBeInTheDocument();\n      expect(screen.getByTestId('risk-indicator')).toHaveClass('bg-red-500');\n    });\n\n    it('should show warning for high-risk traders', () => {\n      const veryHighRiskTrader: TraderStats = {\n        ...mockTrader,\n        maxDrawdown: 65.2,\n        winRate: 25.1,\n        roi: -30.5\n      };\n\n      render(\n        <CopyTradeModal\n          trader={veryHighRiskTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      expect(screen.getByText('⚠️ Warning: This trader has high risk metrics')).toBeInTheDocument();\n      expect(screen.getByText('Consider reducing your allocation percentage')).toBeInTheDocument();\n    });\n\n    it('should calculate and display risk-adjusted allocation suggestion', () => {\n      const moderateRiskTrader: TraderStats = {\n        ...mockTrader,\n        maxDrawdown: 25.3,\n        sharpeRatio: 1.2\n      };\n\n      render(\n        <CopyTradeModal\n          trader={moderateRiskTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      expect(screen.getByText(/Suggested allocation: \\d+%/)).toBeInTheDocument();\n    });\n  });\n\n  describe('Loading and Error States', () => {\n    it('should show loading state when copy operation is in progress', async () => {\n      const mockOnCopyWithDelay = jest.fn().mockImplementation(() => {\n        return new Promise(resolve => setTimeout(resolve, 1000));\n      });\n\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopyWithDelay}\n        />\n      );\n\n      fireEvent.click(screen.getByText('Start Copying'));\n\n      await waitFor(() => {\n        expect(screen.getByText('Setting up copy trade...')).toBeInTheDocument();\n        expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();\n      });\n    });\n\n    it('should show error message when copy operation fails', async () => {\n      const mockOnCopyWithError = jest.fn().mockRejectedValue(\n        new Error('Insufficient balance')\n      );\n\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopyWithError}\n        />\n      );\n\n      fireEvent.click(screen.getByText('Start Copying'));\n\n      await waitFor(() => {\n        expect(screen.getByText('Error: Insufficient balance')).toBeInTheDocument();\n        expect(screen.getByText('Please try again or contact support')).toBeInTheDocument();\n      });\n    });\n\n    it('should allow retry after error', async () => {\n      const mockOnCopyWithError = jest.fn()\n        .mockRejectedValueOnce(new Error('Network error'))\n        .mockResolvedValueOnce({ success: true });\n\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopyWithError}\n        />\n      );\n\n      // First attempt fails\n      fireEvent.click(screen.getByText('Start Copying'));\n\n      await waitFor(() => {\n        expect(screen.getByText('Retry')).toBeInTheDocument();\n      });\n\n      // Retry succeeds\n      fireEvent.click(screen.getByText('Retry'));\n\n      await waitFor(() => {\n        expect(mockOnClose).toHaveBeenCalledTimes(1); // Modal closes on success\n      });\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('should trap focus within modal', () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      const modal = screen.getByTestId('copy-trade-modal');\n      const firstInput = screen.getByLabelText('Allocation Percentage');\n      const lastButton = screen.getByText('Start Copying');\n\n      // Focus should start on first interactive element\n      expect(firstInput).toHaveFocus();\n\n      // Tab from last element should cycle to first\n      lastButton.focus();\n      fireEvent.keyDown(lastButton, { key: 'Tab' });\n      expect(firstInput).toHaveFocus();\n    });\n\n    it('should have proper ARIA labels and roles', () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      const modal = screen.getByTestId('copy-trade-modal');\n      expect(modal).toHaveAttribute('role', 'dialog');\n      expect(modal).toHaveAttribute('aria-labelledby', 'modal-title');\n      expect(modal).toHaveAttribute('aria-modal', 'true');\n\n      expect(screen.getByText('Start Copying')).toHaveAttribute(\n        'aria-describedby',\n        'copy-settings-summary'\n      );\n    });\n\n    it('should announce allocation changes to screen readers', () => {\n      render(\n        <CopyTradeModal\n          trader={mockTrader}\n          isOpen={true}\n          onClose={mockOnClose}\n          onCopy={mockOnCopy}\n        />\n      );\n\n      const slider = screen.getByLabelText('Allocation Percentage');\n      fireEvent.change(slider, { target: { value: '30' } });\n\n      expect(screen.getByText('30% allocation selected')).toHaveAttribute(\n        'aria-live',\n        'polite'\n      );\n    });\n  });\n});"