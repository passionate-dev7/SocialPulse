/**\n * End-to-End Tests for SocialPulse Platform\n * Tests complete user journeys and workflows\n */\n\nimport { test, expect, Page, BrowserContext } from '@playwright/test';\n\n// Test configuration\nconst BASE_URL = process.env.E2E_BASE_URL || 'http://localhost:3000';\nconst TEST_TIMEOUT = 30000;\n\n// Mock trader data for consistent testing\nconst MOCK_TRADER = {\n  address: '0x1234567890123456789012345678901234567890',\n  displayAddress: '0x1234...7890',\n  pnl: '$15,420.50',\n  roi: '24.8%',\n  winRate: '68.5%',\n  volume: '$2.5M'\n};\n\ntest.describe('SocialPulse User Journey E2E Tests', () => {\n  let context: BrowserContext;\n  let page: Page;\n\n  test.beforeAll(async ({ browser }) => {\n    context = await browser.newContext();\n    page = await context.newPage();\n    \n    // Mock API responses\n    await page.route('**/api/traders**', async route => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({\n          traders: [\n            {\n              address: MOCK_TRADER.address,\n              pnl: 15420.50,\n              volume: 2500000.75,\n              winRate: 68.5,\n              sharpeRatio: 2.34,\n              maxDrawdown: 12.8,\n              totalTrades: 156,\n              avgHoldTime: 4.2,\n              roi: 24.8\n            }\n          ],\n          hasMore: false\n        })\n      });\n    });\n\n    // Mock WebSocket connection\n    await page.addInitScript(() => {\n      window.WebSocket = class MockWebSocket {\n        readyState = WebSocket.OPEN;\n        onopen = null;\n        onmessage = null;\n        onerror = null;\n        onclose = null;\n        \n        send(data: string) {\n          console.log('WebSocket send:', data);\n        }\n        \n        close() {\n          console.log('WebSocket closed');\n        }\n      } as any;\n    });\n  });\n\n  test.afterAll(async () => {\n    await context.close();\n  });\n\n  test.describe('First-time User Onboarding', () => {\n    test('should complete full onboarding flow', async () => {\n      await page.goto(BASE_URL);\n      \n      // Landing page should load\n      await expect(page.locator('h1')).toContainText('SocialPulse');\n      await expect(page.locator('[data-testid=\"hero-section\"]')).toBeVisible();\n\n      // Click getting started\n      await page.click('[data-testid=\"get-started-button\"]');\n      \n      // Should navigate to onboarding\n      await expect(page.url()).toContain('/onboarding');\n      await expect(page.locator('h2')).toContainText('Welcome to Social Trading');\n\n      // Step 1: Introduction\n      await expect(page.locator('[data-testid=\"onboarding-step-1\"]')).toBeVisible();\n      await page.click('[data-testid=\"next-button\"]');\n\n      // Step 2: Risk Warning\n      await expect(page.locator('[data-testid=\"onboarding-step-2\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"risk-warning\"]')).toContainText('Trading involves significant risk');\n      await page.check('[data-testid=\"risk-acknowledgment\"]');\n      await page.click('[data-testid=\"next-button\"]');\n\n      // Step 3: Account Setup\n      await expect(page.locator('[data-testid=\"onboarding-step-3\"]')).toBeVisible();\n      await page.fill('[data-testid=\"email-input\"]', 'test@example.com');\n      await page.fill('[data-testid=\"password-input\"]', 'SecurePassword123!');\n      await page.click('[data-testid=\"create-account-button\"]');\n\n      // Should complete onboarding and navigate to dashboard\n      await expect(page.url()).toContain('/dashboard');\n      await expect(page.locator('[data-testid=\"welcome-message\"]')).toContainText('Welcome to your trading dashboard');\n    });\n\n    test('should handle wallet connection during onboarding', async () => {\n      await page.goto(`${BASE_URL}/onboarding`);\n      \n      // Navigate to wallet connection step\n      await page.click('[data-testid=\"skip-to-wallet\"]');\n      \n      // Mock wallet connection\n      await page.addInitScript(() => {\n        (window as any).ethereum = {\n          isMetaMask: true,\n          request: async (params: any) => {\n            if (params.method === 'eth_requestAccounts') {\n              return ['0x9876543210987654321098765432109876543210'];\n            }\n            if (params.method === 'eth_chainId') {\n              return '0x1'; // Mainnet\n            }\n            return null;\n          }\n        };\n      });\n\n      await page.click('[data-testid=\"connect-metamask\"]');\n      \n      // Should show connected state\n      await expect(page.locator('[data-testid=\"wallet-connected\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"connected-address\"]')).toContainText('0x9876...3210');\n      \n      // Should enable continue button\n      const continueButton = page.locator('[data-testid=\"continue-button\"]');\n      await expect(continueButton).toBeEnabled();\n      await continueButton.click();\n      \n      await expect(page.url()).toContain('/dashboard');\n    });\n  });\n\n  test.describe('Trader Discovery and Analysis', () => {\n    test('should browse and filter traders on leaderboard', async () => {\n      await page.goto(`${BASE_URL}/leaderboard`);\n      \n      // Leaderboard should load with traders\n      await expect(page.locator('h1')).toContainText('Top Traders');\n      await expect(page.locator('[data-testid=\"trader-card\"]').first()).toBeVisible();\n      \n      // Verify trader information is displayed\n      const firstTraderCard = page.locator('[data-testid=\"trader-card\"]').first();\n      await expect(firstTraderCard.locator('[data-testid=\"trader-address\"]')).toContainText(MOCK_TRADER.displayAddress);\n      await expect(firstTraderCard.locator('[data-testid=\"trader-pnl\"]')).toContainText(MOCK_TRADER.pnl);\n      await expect(firstTraderCard.locator('[data-testid=\"trader-roi\"]')).toContainText(MOCK_TRADER.roi);\n      \n      // Test filtering\n      await page.fill('[data-testid=\"min-roi-filter\"]', '20');\n      await page.waitForTimeout(500); // Debounce\n      \n      // Should still show trader with 24.8% ROI\n      await expect(page.locator('[data-testid=\"trader-card\"]')).toHaveCount(1);\n      \n      // Filter out the trader\n      await page.fill('[data-testid=\"min-roi-filter\"]', '30');\n      await page.waitForTimeout(500);\n      \n      // Should show no traders\n      await expect(page.locator('[data-testid=\"no-traders-message\"]')).toBeVisible();\n      \n      // Clear filters\n      await page.click('[data-testid=\"clear-filters\"]');\n      await expect(page.locator('[data-testid=\"trader-card\"]')).toHaveCount(1);\n    });\n\n    test('should sort traders by different metrics', async () => {\n      await page.goto(`${BASE_URL}/leaderboard`);\n      \n      // Test sorting by ROI\n      await page.selectOption('[data-testid=\"sort-select\"]', 'roi');\n      await page.waitForTimeout(200);\n      \n      // Verify sort order indication\n      await expect(page.locator('[data-testid=\"sort-direction\"]')).toContainText('↓');\n      \n      // Test reverse sorting\n      await page.click('[data-testid=\"sort-direction-button\"]');\n      await expect(page.locator('[data-testid=\"sort-direction\"]')).toContainText('↑');\n      \n      // Test sorting by win rate\n      await page.selectOption('[data-testid=\"sort-select\"]', 'winRate');\n      await page.waitForTimeout(200);\n      \n      // Verify the trader card is still visible (only one trader in mock data)\n      await expect(page.locator('[data-testid=\"trader-card\"]')).toBeVisible();\n    });\n\n    test('should view detailed trader profile', async () => {\n      await page.goto(`${BASE_URL}/leaderboard`);\n      \n      // Click on trader card to view profile\n      await page.click('[data-testid=\"trader-card\"] [data-testid=\"view-profile\"]');\n      \n      // Should navigate to trader profile page\n      await expect(page.url()).toContain(`/trader/${MOCK_TRADER.address}`);\n      await expect(page.locator('h1')).toContainText('Trader Profile');\n      \n      // Should display comprehensive trader information\n      await expect(page.locator('[data-testid=\"trader-address-full\"]')).toContainText(MOCK_TRADER.address);\n      await expect(page.locator('[data-testid=\"performance-chart\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"trade-history\"]')).toBeVisible();\n      \n      // Should show key metrics\n      await expect(page.locator('[data-testid=\"sharpe-ratio\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"max-drawdown\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"avg-hold-time\"]')).toBeVisible();\n      \n      // Should show follow and copy trade buttons\n      await expect(page.locator('[data-testid=\"follow-trader-button\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"copy-trade-button\"]')).toBeVisible();\n    });\n  });\n\n  test.describe('Copy Trading Setup', () => {\n    test('should complete copy trade setup flow', async () => {\n      await page.goto(`${BASE_URL}/trader/${MOCK_TRADER.address}`);\n      \n      // Click copy trade button\n      await page.click('[data-testid=\"copy-trade-button\"]');\n      \n      // Copy trade modal should open\n      await expect(page.locator('[data-testid=\"copy-trade-modal\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"modal-title\"]')).toContainText('Copy Trade Settings');\n      \n      // Verify trader information in modal\n      await expect(page.locator('[data-testid=\"modal-trader-address\"]')).toContainText(MOCK_TRADER.displayAddress);\n      await expect(page.locator('[data-testid=\"modal-trader-roi\"]')).toContainText(MOCK_TRADER.roi);\n      \n      // Set allocation percentage\n      await page.fill('[data-testid=\"allocation-slider\"]', '25');\n      await expect(page.locator('[data-testid=\"allocation-display\"]')).toContainText('25%');\n      \n      // Set risk management parameters\n      await page.fill('[data-testid=\"stop-loss-input\"]', '10');\n      await page.fill('[data-testid=\"take-profit-input\"]', '20');\n      await page.fill('[data-testid=\"max-position-input\"]', '1000');\n      \n      // Select copy options\n      await page.check('[data-testid=\"copy-all-trades\"]');\n      \n      // Mock the copy trade API call\n      await page.route('**/api/copy-trade', async route => {\n        await route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify({\n            success: true,\n            copyTradeId: 'ct-123',\n            message: 'Copy trading setup successfully'\n          })\n        });\n      });\n      \n      // Submit copy trade setup\n      await page.click('[data-testid=\"start-copying-button\"]');\n      \n      // Should show loading state\n      await expect(page.locator('[data-testid=\"loading-spinner\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"loading-message\"]')).toContainText('Setting up copy trade');\n      \n      // Should show success message\n      await expect(page.locator('[data-testid=\"success-message\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"success-message\"]')).toContainText('Copy trading setup successfully');\n      \n      // Should close modal and navigate to portfolio\n      await page.click('[data-testid=\"view-portfolio-button\"]');\n      await expect(page.url()).toContain('/portfolio');\n    });\n\n    test('should validate copy trade settings', async () => {\n      await page.goto(`${BASE_URL}/trader/${MOCK_TRADER.address}`);\n      await page.click('[data-testid=\"copy-trade-button\"]');\n      \n      // Test allocation validation\n      await page.fill('[data-testid=\"allocation-slider\"]', '60');\n      await expect(page.locator('[data-testid=\"allocation-error\"]')).toContainText('Maximum allocation is 50%');\n      \n      // Test stop loss validation\n      await page.fill('[data-testid=\"stop-loss-input\"]', '60');\n      await expect(page.locator('[data-testid=\"stop-loss-error\"]')).toContainText('Stop loss cannot exceed 50%');\n      \n      // Test take profit validation\n      await page.fill('[data-testid=\"take-profit-input\"]', '5');\n      await expect(page.locator('[data-testid=\"take-profit-error\"]')).toContainText('Take profit should be at least 10%');\n      \n      // Fix validation errors\n      await page.fill('[data-testid=\"allocation-slider\"]', '25');\n      await page.fill('[data-testid=\"stop-loss-input\"]', '15');\n      await page.fill('[data-testid=\"take-profit-input\"]', '25');\n      \n      // Errors should clear\n      await expect(page.locator('[data-testid=\"allocation-error\"]')).not.toBeVisible();\n      await expect(page.locator('[data-testid=\"stop-loss-error\"]')).not.toBeVisible();\n      await expect(page.locator('[data-testid=\"take-profit-error\"]')).not.toBeVisible();\n      \n      // Start copying button should be enabled\n      await expect(page.locator('[data-testid=\"start-copying-button\"]')).toBeEnabled();\n    });\n\n    test('should handle copy trade setup errors', async () => {\n      await page.goto(`${BASE_URL}/trader/${MOCK_TRADER.address}`);\n      await page.click('[data-testid=\"copy-trade-button\"]');\n      \n      // Set valid parameters\n      await page.fill('[data-testid=\"allocation-slider\"]', '20');\n      await page.fill('[data-testid=\"stop-loss-input\"]', '10');\n      await page.fill('[data-testid=\"take-profit-input\"]', '20');\n      \n      // Mock API error\n      await page.route('**/api/copy-trade', async route => {\n        await route.fulfill({\n          status: 400,\n          contentType: 'application/json',\n          body: JSON.stringify({\n            success: false,\n            error: 'Insufficient balance'\n          })\n        });\n      });\n      \n      await page.click('[data-testid=\"start-copying-button\"]');\n      \n      // Should show error message\n      await expect(page.locator('[data-testid=\"error-message\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"error-message\"]')).toContainText('Insufficient balance');\n      \n      // Should show retry button\n      await expect(page.locator('[data-testid=\"retry-button\"]')).toBeVisible();\n    });\n  });\n\n  test.describe('Portfolio Management', () => {\n    test('should view and manage copy trading positions', async () => {\n      // Mock portfolio data\n      await page.route('**/api/portfolio**', async route => {\n        await route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify({\n            copyTrades: [\n              {\n                id: 'ct-123',\n                trader: MOCK_TRADER.address,\n                allocation: 25,\n                status: 'active',\n                pnl: 245.50,\n                positions: [\n                  {\n                    coin: 'BTC',\n                    size: 0.1,\n                    entryPrice: 47000,\n                    currentPrice: 48000,\n                    pnl: 100\n                  }\n                ]\n              }\n            ]\n          })\n        });\n      });\n      \n      await page.goto(`${BASE_URL}/portfolio`);\n      \n      // Portfolio page should load\n      await expect(page.locator('h1')).toContainText('Portfolio');\n      \n      // Should show copy trading positions\n      await expect(page.locator('[data-testid=\"copy-trade-card\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"copy-trade-trader\"]')).toContainText(MOCK_TRADER.displayAddress);\n      await expect(page.locator('[data-testid=\"copy-trade-pnl\"]')).toContainText('$245.50');\n      await expect(page.locator('[data-testid=\"copy-trade-status\"]')).toContainText('Active');\n      \n      // Should show individual positions\n      await expect(page.locator('[data-testid=\"position-card\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"position-coin\"]')).toContainText('BTC');\n      await expect(page.locator('[data-testid=\"position-pnl\"]')).toContainText('$100.00');\n    });\n\n    test('should modify copy trade settings', async () => {\n      await page.goto(`${BASE_URL}/portfolio`);\n      \n      // Click modify button on copy trade\n      await page.click('[data-testid=\"modify-copy-trade\"]');\n      \n      // Should open settings modal\n      await expect(page.locator('[data-testid=\"modify-settings-modal\"]')).toBeVisible();\n      \n      // Update allocation\n      await page.fill('[data-testid=\"allocation-input\"]', '30');\n      await page.fill('[data-testid=\"stop-loss-input\"]', '12');\n      \n      // Mock update API\n      await page.route('**/api/copy-trade/ct-123', async route => {\n        await route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify({ success: true })\n        });\n      });\n      \n      await page.click('[data-testid=\"save-changes-button\"]');\n      \n      // Should show success message\n      await expect(page.locator('[data-testid=\"update-success\"]')).toBeVisible();\n    });\n\n    test('should stop copy trading', async () => {\n      await page.goto(`${BASE_URL}/portfolio`);\n      \n      // Click stop copy trade button\n      await page.click('[data-testid=\"stop-copy-trade\"]');\n      \n      // Should show confirmation dialog\n      await expect(page.locator('[data-testid=\"stop-confirmation-dialog\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"confirmation-message\"]')).toContainText(\n        'Are you sure you want to stop copying this trader?'\n      );\n      \n      // Mock stop API\n      await page.route('**/api/copy-trade/ct-123/stop', async route => {\n        await route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify({ success: true })\n        });\n      });\n      \n      await page.click('[data-testid=\"confirm-stop-button\"]');\n      \n      // Should show stopped status\n      await expect(page.locator('[data-testid=\"copy-trade-status\"]')).toContainText('Stopped');\n    });\n  });\n\n  test.describe('Real-time Updates', () => {\n    test('should receive and display real-time trade updates', async () => {\n      await page.goto(`${BASE_URL}/portfolio`);\n      \n      // Mock WebSocket message for new trade\n      await page.evaluate(() => {\n        const mockTrade = {\n          type: 'trade',\n          trader: '0x1234567890123456789012345678901234567890',\n          data: {\n            coin: 'ETH',\n            side: 'buy',\n            price: 3000,\n            size: 0.5,\n            timestamp: Date.now()\n          }\n        };\n        \n        // Simulate WebSocket message\n        window.dispatchEvent(new CustomEvent('websocket-message', {\n          detail: mockTrade\n        }));\n      });\n      \n      // Should show notification for new trade\n      await expect(page.locator('[data-testid=\"trade-notification\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"trade-notification\"]')).toContainText('New ETH trade copied');\n      \n      // Should update portfolio values\n      await page.waitForTimeout(1000);\n      // In a real implementation, portfolio values would update\n    });\n\n    test('should handle WebSocket disconnection gracefully', async () => {\n      await page.goto(`${BASE_URL}/portfolio`);\n      \n      // Simulate WebSocket disconnection\n      await page.evaluate(() => {\n        window.dispatchEvent(new CustomEvent('websocket-disconnect'));\n      });\n      \n      // Should show connection warning\n      await expect(page.locator('[data-testid=\"connection-warning\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"connection-warning\"]')).toContainText(\n        'Connection lost. Attempting to reconnect...'\n      );\n      \n      // Simulate reconnection\n      await page.evaluate(() => {\n        window.dispatchEvent(new CustomEvent('websocket-reconnect'));\n      });\n      \n      // Warning should disappear\n      await expect(page.locator('[data-testid=\"connection-warning\"]')).not.toBeVisible();\n    });\n  });\n\n  test.describe('Error Scenarios', () => {\n    test('should handle API failures gracefully', async () => {\n      // Mock API failure\n      await page.route('**/api/traders**', async route => {\n        await route.fulfill({\n          status: 500,\n          contentType: 'application/json',\n          body: JSON.stringify({ error: 'Internal server error' })\n        });\n      });\n      \n      await page.goto(`${BASE_URL}/leaderboard`);\n      \n      // Should show error state\n      await expect(page.locator('[data-testid=\"error-state\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"error-message\"]')).toContainText(\n        'Failed to load traders'\n      );\n      \n      // Should show retry button\n      await expect(page.locator('[data-testid=\"retry-button\"]')).toBeVisible();\n    });\n\n    test('should handle wallet disconnection during trading', async () => {\n      await page.goto(`${BASE_URL}/trader/${MOCK_TRADER.address}`);\n      \n      // Simulate wallet disconnection\n      await page.evaluate(() => {\n        delete (window as any).ethereum;\n      });\n      \n      await page.click('[data-testid=\"copy-trade-button\"]');\n      \n      // Should show wallet connection error\n      await expect(page.locator('[data-testid=\"wallet-error\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"wallet-error\"]')).toContainText(\n        'Wallet not connected'\n      );\n      \n      // Should show connect wallet button\n      await expect(page.locator('[data-testid=\"connect-wallet-button\"]')).toBeVisible();\n    });\n\n    test('should handle network timeouts', async () => {\n      // Mock slow API response\n      await page.route('**/api/copy-trade', async route => {\n        await new Promise(resolve => setTimeout(resolve, 15000)); // 15 second delay\n        await route.fulfill({\n          status: 408,\n          contentType: 'application/json',\n          body: JSON.stringify({ error: 'Request timeout' })\n        });\n      });\n      \n      await page.goto(`${BASE_URL}/trader/${MOCK_TRADER.address}`);\n      await page.click('[data-testid=\"copy-trade-button\"]');\n      \n      // Fill form and submit\n      await page.fill('[data-testid=\"allocation-slider\"]', '20');\n      await page.click('[data-testid=\"start-copying-button\"]');\n      \n      // Should show timeout error\n      await expect(page.locator('[data-testid=\"timeout-error\"]')).toBeVisible({ timeout: 20000 });\n      await expect(page.locator('[data-testid=\"timeout-error\"]')).toContainText('Request timeout');\n    });\n  });\n\n  test.describe('Performance', () => {\n    test('should load leaderboard within acceptable time', async () => {\n      const startTime = Date.now();\n      \n      await page.goto(`${BASE_URL}/leaderboard`);\n      await expect(page.locator('[data-testid=\"trader-card\"]').first()).toBeVisible();\n      \n      const loadTime = Date.now() - startTime;\n      expect(loadTime).toBeLessThan(3000); // Should load within 3 seconds\n    });\n\n    test('should handle large trader datasets efficiently', async () => {\n      // Mock large dataset\n      const largeMockData = {\n        traders: Array.from({ length: 500 }, (_, i) => ({\n          address: `0x${i.toString().padStart(40, '0')}`,\n          pnl: Math.random() * 10000,\n          volume: Math.random() * 1000000,\n          winRate: Math.random() * 100,\n          sharpeRatio: Math.random() * 5,\n          maxDrawdown: Math.random() * 50,\n          totalTrades: Math.floor(Math.random() * 1000),\n          avgHoldTime: Math.random() * 24,\n          roi: (Math.random() - 0.5) * 100\n        })),\n        hasMore: true\n      };\n      \n      await page.route('**/api/traders**', async route => {\n        await route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify(largeMockData)\n        });\n      });\n      \n      const startTime = Date.now();\n      \n      await page.goto(`${BASE_URL}/leaderboard`);\n      await expect(page.locator('[data-testid=\"trader-card\"]')).toHaveCount(20); // Initial page size\n      \n      const renderTime = Date.now() - startTime;\n      expect(renderTime).toBeLessThan(5000); // Should render within 5 seconds\n      \n      // Test scrolling performance\n      const scrollStart = Date.now();\n      await page.evaluate(() => {\n        window.scrollTo(0, document.body.scrollHeight);\n      });\n      \n      const scrollTime = Date.now() - scrollStart;\n      expect(scrollTime).toBeLessThan(1000); // Scrolling should be smooth\n    });\n  });\n});"